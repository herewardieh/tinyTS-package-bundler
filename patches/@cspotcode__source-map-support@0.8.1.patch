diff --git a/source-map-support.js b/source-map-support.js
index ad830b62f47db3f0d04843dde5649a4b03fbcfae..398ac7a29f86fda157270bff6166601d11b87954 100644
--- a/source-map-support.js
+++ b/source-map-support.js
@@ -1,11 +1,15 @@
-const { TraceMap, originalPositionFor, AnyMap } = require('@jridgewell/trace-mapping');
-var path = require('path');
-const { fileURLToPath, pathToFileURL } = require('url');
-var util = require('util');
+const {
+  TraceMap,
+  originalPositionFor,
+  AnyMap,
+} = require("@jridgewell/trace-mapping");
+var path = require("path");
+const { fileURLToPath, pathToFileURL } = require("url");
+var util = require("util");
 
 var fs;
 try {
-  fs = require('fs');
+  fs = require("fs");
   if (!fs.existsSync || !fs.readFileSync) {
     // fs doesn't have all methods we need
     fs = null;
@@ -42,8 +46,8 @@ var sharedDataVersion = 1;
  * @returns {T}
  */
 function initializeSharedData(defaults) {
-  var sharedDataKey = 'source-map-support/sharedData';
-  if (typeof Symbol !== 'undefined') {
+  var sharedDataKey = "source-map-support/sharedData";
+  if (typeof Symbol !== "undefined") {
     sharedDataKey = Symbol.for(sharedDataKey);
   }
   var sharedData = this[sharedDataKey];
@@ -56,7 +60,9 @@ function initializeSharedData(defaults) {
     }
   }
   if (sharedDataVersion !== sharedData.version) {
-    throw new Error("Multiple incompatible instances of source-map-support were loaded");
+    throw new Error(
+      "Multiple incompatible instances of source-map-support were loaded"
+    );
   }
   for (var key in defaults) {
     if (!(key in sharedData)) {
@@ -76,7 +82,6 @@ function initializeSharedData(defaults) {
 // package's version numbers, which should reflect the *external* API of
 // source-map-support.)
 var sharedData = initializeSharedData({
-
   // Only install once if called multiple times
   // Remember how the environment looked before installation so we can restore if able
   /** @type {HookState} */
@@ -107,7 +112,6 @@ var sharedData = initializeSharedData({
   // When resetting state, we must keep these.
   internalRetrieveFileHandlers: [],
   internalRetrieveMapHandlers: [],
-
 });
 
 // Supports {browser, node, auto}
@@ -117,19 +121,30 @@ var environment = "auto";
 var reSourceMap = /^data:application\/json[^,]+base64,/;
 
 function isInBrowser() {
-  if (environment === "browser")
-    return true;
-  if (environment === "node")
-    return false;
-  return ((typeof window !== 'undefined') && (typeof XMLHttpRequest === 'function') && !(window.require && window.module && window.process && window.process.type === "renderer"));
+  if (environment === "browser") return true;
+  if (environment === "node") return false;
+  return (
+    typeof window !== "undefined" &&
+    typeof XMLHttpRequest === "function" &&
+    !(
+      window.require &&
+      window.module &&
+      window.process &&
+      window.process.type === "renderer"
+    )
+  );
 }
 
 function hasGlobalProcessEventEmitter() {
-  return ((typeof process === 'object') && (process !== null) && (typeof process.on === 'function'));
+  return (
+    typeof process === "object" &&
+    process !== null &&
+    typeof process.on === "function"
+  );
 }
 
 function tryFileURLToPath(v) {
-  if(isFileUrl(v)) {
+  if (isFileUrl(v)) {
     return fileURLToPath(v);
   }
   return v;
@@ -137,7 +152,7 @@ function tryFileURLToPath(v) {
 
 // TODO un-copy these from resolve-uri; see if they can be exported from that lib
 function isFileUrl(input) {
-  return input.startsWith('file:');
+  return input.startsWith("file:");
 }
 function isAbsoluteUrl(input) {
   return schemeRegex.test(input);
@@ -145,14 +160,14 @@ function isAbsoluteUrl(input) {
 // Matches the scheme of a URL, eg "http://"
 const schemeRegex = /^[\w+.-]+:\/\//;
 function isSchemeRelativeUrl(input) {
-  return input.startsWith('//');
+  return input.startsWith("//");
 }
 
 // #region Caches
 /** @param {string} pathOrFileUrl */
 function getCacheKey(pathOrFileUrl) {
-  if(pathOrFileUrl.startsWith('node:')) return pathOrFileUrl;
-  if(isFileUrl(pathOrFileUrl)) {
+  if (pathOrFileUrl.startsWith("node:")) return pathOrFileUrl;
+  if (isFileUrl(pathOrFileUrl)) {
     // Must normalize spaces to %20, stuff like that
     return new URL(pathOrFileUrl).toString();
   } else {
@@ -167,19 +182,22 @@ function getFileContentsCache(key) {
   return sharedData.fileContentsCache[getCacheKey(key)];
 }
 function hasFileContentsCacheFromKey(key) {
-  return Object.prototype.hasOwnProperty.call(sharedData.fileContentsCache, key);
+  return Object.prototype.hasOwnProperty.call(
+    sharedData.fileContentsCache,
+    key
+  );
 }
 function getFileContentsCacheFromKey(key) {
   return sharedData.fileContentsCache[key];
 }
 function setFileContentsCache(key, value) {
-  return sharedData.fileContentsCache[getCacheKey(key)] = value;
+  return (sharedData.fileContentsCache[getCacheKey(key)] = value);
 }
 function getSourceMapCache(key) {
   return sharedData.sourceMapCache[getCacheKey(key)];
 }
 function setSourceMapCache(key, value) {
-  return sharedData.sourceMapCache[getCacheKey(key)] = value;
+  return (sharedData.sourceMapCache[getCacheKey(key)] = value);
 }
 function clearCaches() {
   sharedData.fileContentsCache = Object.create(null);
@@ -188,7 +206,7 @@ function clearCaches() {
 // #endregion Caches
 
 function handlerExec(list, internalList) {
-  return function(arg) {
+  return function (arg) {
     for (var i = 0; i < list.length; i++) {
       var ret = list[i](arg);
       if (ret) {
@@ -205,37 +223,40 @@ function handlerExec(list, internalList) {
   };
 }
 
-var retrieveFile = handlerExec(sharedData.retrieveFileHandlers, sharedData.internalRetrieveFileHandlers);
+var retrieveFile = handlerExec(
+  sharedData.retrieveFileHandlers,
+  sharedData.internalRetrieveFileHandlers
+);
 
-sharedData.internalRetrieveFileHandlers.push(function(path) {
+sharedData.internalRetrieveFileHandlers.push(function (path) {
   // Trim the path to make sure there is no extra whitespace.
   path = path.trim();
   if (/^file:/.test(path)) {
     // existsSync/readFileSync can't handle file protocol, but once stripped, it works
-    path = path.replace(/file:\/\/\/(\w:)?/, function(protocol, drive) {
-      return drive ?
-        '' : // file:///C:/dir/file -> C:/dir/file
-        '/'; // file:///root-dir/file -> /root-dir/file
+    path = path.replace(/file:\/\/\/(\w:)?/, function (protocol, drive) {
+      return drive
+        ? "" // file:///C:/dir/file -> C:/dir/file
+        : "/"; // file:///root-dir/file -> /root-dir/file
     });
   }
   const key = getCacheKey(path);
-  if(hasFileContentsCacheFromKey(key)) {
+  if (hasFileContentsCacheFromKey(key)) {
     return getFileContentsCacheFromKey(key);
   }
 
-  var contents = '';
+  var contents = "";
   try {
     if (!fs) {
       // Use SJAX if we are in the browser
       var xhr = new XMLHttpRequest();
-      xhr.open('GET', path, /** async */ false);
+      xhr.open("GET", path, /** async */ false);
       xhr.send(null);
       if (xhr.readyState === 4 && xhr.status === 200) {
         contents = xhr.responseText;
       }
     } else if (fs.existsSync(path)) {
       // Otherwise, use the filesystem
-      contents = fs.readFileSync(path, 'utf8');
+      contents = fs.readFileSync(path, "utf8");
     }
   } catch (er) {
     /* ignore any errors */
@@ -247,66 +268,68 @@ sharedData.internalRetrieveFileHandlers.push(function(path) {
 // Support URLs relative to a directory, but be careful about a protocol prefix
 // in case we are in the browser (i.e. directories may start with "http://" or "file:///")
 function supportRelativeURL(file, url) {
-  if(!file) return url;
+  if (!file) return url;
   // given that this happens within error formatting codepath, probably best to
   // fallback instead of throwing if anything goes wrong
   try {
     // if should output a URL
-    if(isAbsoluteUrl(file) || isSchemeRelativeUrl(file)) {
-        if(isAbsoluteUrl(url) || isSchemeRelativeUrl(url)) {
-            return new URL(url, file).toString();
-        }
-        if(path.isAbsolute(url)) {
-            return new URL(pathToFileURL(url), file).toString();
-        }
-        // url is relative path or URL
-        return new URL(url.replace(/\\/g, '/'), file).toString();
+    if (isAbsoluteUrl(file) || isSchemeRelativeUrl(file)) {
+      if (isAbsoluteUrl(url) || isSchemeRelativeUrl(url)) {
+        return new URL(url, file).toString();
+      }
+      if (path.isAbsolute(url)) {
+        return new URL(pathToFileURL(url), file).toString();
+      }
+      // url is relative path or URL
+      return new URL(url.replace(/\\/g, "/"), file).toString();
     }
     // if should output a path (unless URL is something like https://)
-    if(path.isAbsolute(file)) {
-        if(isFileUrl(url)) {
-            return fileURLToPath(url);
-        }
-        if(isSchemeRelativeUrl(url)) {
-            return fileURLToPath(new URL(url, 'file://'));
-        }
-        if(isAbsoluteUrl(url)) {
-            // url is a non-file URL
-            // Go with the URL
-            return url;
-        }
-        if(path.isAbsolute(url)) {
-            // Normalize at all?  decodeURI or normalize slashes?
-            return path.normalize(url);
-        }
-        // url is relative path or URL
-        return path.join(file, '..', decodeURI(url));
+    if (path.isAbsolute(file)) {
+      if (isFileUrl(url)) {
+        return fileURLToPath(url);
+      }
+      if (isSchemeRelativeUrl(url)) {
+        return fileURLToPath(new URL(url, "file://"));
+      }
+      if (isAbsoluteUrl(url)) {
+        // url is a non-file URL
+        // Go with the URL
+        return url;
+      }
+      if (path.isAbsolute(url)) {
+        // Normalize at all?  decodeURI or normalize slashes?
+        return path.normalize(url);
+      }
+      // url is relative path or URL
+      return path.join(file, "..", decodeURI(url));
     }
     // If we get here, file is relative.
     // Shouldn't happen since node identifies modules with absolute paths or URLs.
     // But we can take a stab at returning something meaningful anyway.
-    if(isAbsoluteUrl(url) || isSchemeRelativeUrl(url)) {
-        return url;
-    }
-    return path.join(file, '..', url);
-  } catch(e) {
+    if (isAbsoluteUrl(url) || isSchemeRelativeUrl(url)) {
       return url;
+    }
+    return path.join(file, "..", url);
+  } catch (e) {
+    return url;
   }
 }
 
 // Return pathOrUrl in the same style as matchStyleOf: either a file URL or a native path
 function matchStyleOfPathOrUrl(matchStyleOf, pathOrUrl) {
   try {
-    if(isAbsoluteUrl(matchStyleOf) || isSchemeRelativeUrl(matchStyleOf)) {
-      if(isAbsoluteUrl(pathOrUrl) || isSchemeRelativeUrl(pathOrUrl)) return pathOrUrl;
-      if(path.isAbsolute(pathOrUrl)) return pathToFileURL(pathOrUrl).toString();
-    } else if(path.isAbsolute(matchStyleOf)) {
-      if(isAbsoluteUrl(pathOrUrl) || isSchemeRelativeUrl(pathOrUrl)) {
-        return fileURLToPath(new URL(pathOrUrl, 'file://'));
+    if (isAbsoluteUrl(matchStyleOf) || isSchemeRelativeUrl(matchStyleOf)) {
+      if (isAbsoluteUrl(pathOrUrl) || isSchemeRelativeUrl(pathOrUrl))
+        return pathOrUrl;
+      if (path.isAbsolute(pathOrUrl))
+        return pathToFileURL(pathOrUrl).toString();
+    } else if (path.isAbsolute(matchStyleOf)) {
+      if (isAbsoluteUrl(pathOrUrl) || isSchemeRelativeUrl(pathOrUrl)) {
+        return fileURLToPath(new URL(pathOrUrl, "file://"));
       }
     }
     return pathOrUrl;
-  } catch(e) {
+  } catch (e) {
     return pathOrUrl;
   }
 }
@@ -315,32 +338,34 @@ function retrieveSourceMapURL(source) {
   var fileData;
 
   if (isInBrowser()) {
-     try {
-       var xhr = new XMLHttpRequest();
-       xhr.open('GET', source, false);
-       xhr.send(null);
-       fileData = xhr.readyState === 4 ? xhr.responseText : null;
-
-       // Support providing a sourceMappingURL via the SourceMap header
-       var sourceMapHeader = xhr.getResponseHeader("SourceMap") ||
-                             xhr.getResponseHeader("X-SourceMap");
-       if (sourceMapHeader) {
-         return sourceMapHeader;
-       }
-     } catch (e) {
-     }
+    try {
+      var xhr = new XMLHttpRequest();
+      xhr.open("GET", source, false);
+      xhr.send(null);
+      fileData = xhr.readyState === 4 ? xhr.responseText : null;
+
+      // Support providing a sourceMappingURL via the SourceMap header
+      var sourceMapHeader =
+        xhr.getResponseHeader("SourceMap") ||
+        xhr.getResponseHeader("X-SourceMap");
+      if (sourceMapHeader) {
+        return sourceMapHeader;
+      }
+    } catch (e) {}
   }
 
   // Get the URL of the source map
   fileData = retrieveFile(tryFileURLToPath(source));
-  var re = /(?:\/\/[@#][\s]*sourceMappingURL=([^\s'"]+)[\s]*$)|(?:\/\*[@#][\s]*sourceMappingURL=([^\s*'"]+)[\s]*(?:\*\/)[\s]*$)/mg;
+  var re =
+    /(?:\/\/[@#][\s]*sourceMappingURL=([^\s'"]+)[\s]*$)|(?:\/\*[@#][\s]*sourceMappingURL=([^\s*'"]+)[\s]*(?:\*\/)[\s]*$)/gm;
   // Keep executing the search to find the *last* sourceMappingURL to avoid
   // picking up sourceMappingURLs from comments, strings, etc.
   var lastMatch, match;
-  while (match = re.exec(fileData)) lastMatch = match;
+  while ((match = re.exec(fileData))) lastMatch = match;
   if (!lastMatch) return null;
+  if (source.includes("tsup/dist/index.js")) return null;
   return lastMatch[1];
-};
+}
 
 // Can be overridden by the retrieveSourceMap option to install. Takes a
 // generated source filename; returns a {map, optional url} object, or null if
@@ -348,8 +373,11 @@ function retrieveSourceMapURL(source) {
 // JSON object (ie, it must be a valid argument to the SourceMapConsumer
 // constructor).
 /** @type {(source: string) => import('./source-map-support').UrlAndMap | null} */
-var retrieveSourceMap = handlerExec(sharedData.retrieveMapHandlers, sharedData.internalRetrieveMapHandlers);
-sharedData.internalRetrieveMapHandlers.push(function(source) {
+var retrieveSourceMap = handlerExec(
+  sharedData.retrieveMapHandlers,
+  sharedData.internalRetrieveMapHandlers
+);
+sharedData.internalRetrieveMapHandlers.push(function (source) {
   var sourceMappingURL = retrieveSourceMapURL(source);
   if (!sourceMappingURL) return null;
 
@@ -357,7 +385,7 @@ sharedData.internalRetrieveMapHandlers.push(function(source) {
   var sourceMapData;
   if (reSourceMap.test(sourceMappingURL)) {
     // Support source map URL as a data url
-    var rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(',') + 1);
+    var rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(",") + 1);
     sourceMapData = Buffer.from(rawData, "base64").toString();
     sourceMappingURL = source;
   } else {
@@ -372,7 +400,7 @@ sharedData.internalRetrieveMapHandlers.push(function(source) {
 
   return {
     url: sourceMappingURL,
-    map: sourceMapData
+    map: sourceMapData,
   };
 });
 
@@ -384,18 +412,20 @@ function mapSourcePosition(position) {
     if (urlAndMap) {
       sourceMap = setSourceMapCache(position.source, {
         url: urlAndMap.url,
-        map: new AnyMap(urlAndMap.map, urlAndMap.url)
+        map: new AnyMap(urlAndMap.map, urlAndMap.url),
       });
 
       // Overwrite trace-mapping's resolutions, because they do not handle
       // Windows paths the way we want.
       // TODO Remove now that windows path support was added to resolve-uri and thus trace-mapping?
-      sourceMap.map.resolvedSources = sourceMap.map.sources.map(s => supportRelativeURL(sourceMap.url, s));
+      sourceMap.map.resolvedSources = sourceMap.map.sources.map((s) =>
+        supportRelativeURL(sourceMap.url, s)
+      );
 
       // Load all sources stored inline with the source map into the file cache
       // to pretend like they are already loaded. They may not exist on disk.
       if (sourceMap.map.sourcesContent) {
-        sourceMap.map.resolvedSources.forEach(function(resolvedSource, i) {
+        sourceMap.map.resolvedSources.forEach(function (resolvedSource, i) {
           var contents = sourceMap.map.sourcesContent[i];
           if (contents) {
             setFileContentsCache(resolvedSource, contents);
@@ -405,7 +435,7 @@ function mapSourcePosition(position) {
     } else {
       sourceMap = setSourceMapCache(position.source, {
         url: null,
-        map: null
+        map: null,
       });
     }
   }
@@ -424,7 +454,9 @@ function mapSourcePosition(position) {
       // so is *already* as absolute as possible.
       // However, we want to ensure we output in same format as input: URL or native path
       originalPosition.source = matchStyleOfPathOrUrl(
-        position.source, originalPosition.source);
+        position.source,
+        originalPosition.source
+      );
       return originalPosition;
     }
   }
@@ -441,16 +473,25 @@ function mapEvalOrigin(origin) {
     var position = mapSourcePosition({
       source: match[2],
       line: +match[3],
-      column: match[4] - 1
+      column: match[4] - 1,
     });
-    return 'eval at ' + match[1] + ' (' + position.source + ':' +
-      position.line + ':' + (position.column + 1) + ')';
+    return (
+      "eval at " +
+      match[1] +
+      " (" +
+      position.source +
+      ":" +
+      position.line +
+      ":" +
+      (position.column + 1) +
+      ")"
+    );
   }
 
   // Parse nested eval() calls using recursion
   match = /^eval at ([^(]+) \((.+)\)$/.exec(origin);
   if (match) {
-    return 'eval at ' + match[1] + ' (' + mapEvalOrigin(match[2]) + ')';
+    return "eval at " + match[1] + " (" + mapEvalOrigin(match[2]) + ")";
   }
 
   // Make sure we still return useful information if we didn't find anything
@@ -476,7 +517,7 @@ function CallSiteToString() {
     fileName = this.getScriptNameOrSourceURL();
     if (!fileName && this.isEval()) {
       fileLocation = this.getEvalOrigin();
-      fileLocation += ", ";  // Expecting source position to follow.
+      fileLocation += ", "; // Expecting source position to follow.
     }
 
     if (fileName) {
@@ -499,14 +540,14 @@ function CallSiteToString() {
 
   var line = "";
   var isAsync = this.isAsync ? this.isAsync() : false;
-  if(isAsync) {
-    line += 'async ';
+  if (isAsync) {
+    line += "async ";
     var isPromiseAll = this.isPromiseAll ? this.isPromiseAll() : false;
     var isPromiseAny = this.isPromiseAny ? this.isPromiseAny() : false;
-    if(isPromiseAny || isPromiseAll) {
-      line += isPromiseAll ? 'Promise.all (index ' : 'Promise.any (index ';
+    if (isPromiseAny || isPromiseAll) {
+      line += isPromiseAll ? "Promise.all (index " : "Promise.any (index ";
       var promiseIndex = this.getPromiseIndex();
-      line += promiseIndex + ')';
+      line += promiseIndex + ")";
     }
   }
   var functionName = this.getFunctionName();
@@ -525,7 +566,11 @@ function CallSiteToString() {
         line += typeName + ".";
       }
       line += functionName;
-      if (methodName && functionName.indexOf("." + methodName) != functionName.length - methodName.length - 1) {
+      if (
+        methodName &&
+        functionName.indexOf("." + methodName) !=
+          functionName.length - methodName.length - 1
+      ) {
         line += " [as " + methodName + "]";
       }
     } else {
@@ -547,8 +592,14 @@ function CallSiteToString() {
 
 function cloneCallSite(frame) {
   var object = {};
-  Object.getOwnPropertyNames(Object.getPrototypeOf(frame)).forEach(function(name) {
-    object[name] = /^(?:is|get)/.test(name) ? function() { return frame[name].call(frame); } : frame[name];
+  Object.getOwnPropertyNames(Object.getPrototypeOf(frame)).forEach(function (
+    name
+  ) {
+    object[name] = /^(?:is|get)/.test(name)
+      ? function () {
+          return frame[name].call(frame);
+        }
+      : frame[name];
   });
   object.toString = CallSiteToString;
   return object;
@@ -557,9 +608,9 @@ function cloneCallSite(frame) {
 function wrapCallSite(frame, state) {
   // provides interface backward compatibility
   if (state === undefined) {
-    state = { nextPosition: null, curPosition: null }
+    state = { nextPosition: null, curPosition: null };
   }
-  if(frame.isNative()) {
+  if (frame.isNative()) {
     state.curPosition = null;
     return frame;
   }
@@ -570,7 +621,7 @@ function wrapCallSite(frame, state) {
   var source = frame.getFileName() || frame.getScriptNameOrSourceURL();
   if (source) {
     // v8 does not expose its internal isWasm, etc methods, so we do this instead.
-    if(source.startsWith('wasm://')) {
+    if (source.startsWith("wasm://")) {
       state.curPosition = null;
       return frame;
     }
@@ -583,30 +634,44 @@ function wrapCallSite(frame, state) {
     // Header removed in node at ^10.16 || >=11.11.0
     // v11 is not an LTS candidate, we can just test the one version with it.
     // Test node versions for: 10.16-19, 10.20+, 12-19, 20-99, 100+, or 11.11
-    var noHeader = /^v(10\.1[6-9]|10\.[2-9][0-9]|10\.[0-9]{3,}|1[2-9]\d*|[2-9]\d|\d{3,}|11\.11)/;
+    var noHeader =
+      /^v(10\.1[6-9]|10\.[2-9][0-9]|10\.[0-9]{3,}|1[2-9]\d*|[2-9]\d|\d{3,}|11\.11)/;
     var headerLength = noHeader.test(process.version) ? 0 : 62;
-    if (line === 1 && column > headerLength && !isInBrowser() && !frame.isEval()) {
+    if (
+      line === 1 &&
+      column > headerLength &&
+      !isInBrowser() &&
+      !frame.isEval()
+    ) {
       column -= headerLength;
     }
 
     var position = mapSourcePosition({
       source: source,
       line: line,
-      column: column
+      column: column,
     });
     state.curPosition = position;
     frame = cloneCallSite(frame);
     var originalFunctionName = frame.getFunctionName;
-    frame.getFunctionName = function() {
+    frame.getFunctionName = function () {
       if (state.nextPosition == null) {
         return originalFunctionName();
       }
       return state.nextPosition.name || originalFunctionName();
     };
-    frame.getFileName = function() { return position.source; };
-    frame.getLineNumber = function() { return position.line; };
-    frame.getColumnNumber = function() { return position.column + 1; };
-    frame.getScriptNameOrSourceURL = function() { return position.source; };
+    frame.getFileName = function () {
+      return position.source;
+    };
+    frame.getLineNumber = function () {
+      return position.line;
+    };
+    frame.getColumnNumber = function () {
+      return position.column + 1;
+    };
+    frame.getScriptNameOrSourceURL = function () {
+      return position.source;
+    };
     return frame;
   }
 
@@ -615,7 +680,9 @@ function wrapCallSite(frame, state) {
   if (origin) {
     origin = mapEvalOrigin(origin);
     frame = cloneCallSite(frame);
-    frame.getEvalOrigin = function() { return origin; };
+    frame.getEvalOrigin = function () {
+      return origin;
+    };
     return frame;
   }
 
@@ -628,13 +695,15 @@ try {
   // Get a deliberate ERR_INVALID_ARG_TYPE
   // TODO is there a better way to reliably get an instance of NodeError?
   path.resolve(123);
-} catch(e) {
+} catch (e) {
   const symbols = Object.getOwnPropertySymbols(e);
-  const symbol = symbols.find(function (s) {return s.toString().indexOf('kIsNodeError') >= 0});
-  if(symbol) kIsNodeError = symbol;
+  const symbol = symbols.find(function (s) {
+    return s.toString().indexOf("kIsNodeError") >= 0;
+  });
+  if (symbol) kIsNodeError = symbol;
 }
 
-const ErrorPrototypeToString = (err) =>Error.prototype.toString.call(err);
+const ErrorPrototypeToString = (err) => Error.prototype.toString.call(err);
 
 /** @param {HookState} hookState */
 function createPrepareStackTrace(hookState) {
@@ -643,7 +712,8 @@ function createPrepareStackTrace(hookState) {
   // This function is part of the V8 stack trace API, for more info see:
   // https://v8.dev/docs/stack-trace-api
   function prepareStackTrace(error, stack) {
-    if(!hookState.enabled) return hookState.originalValue.apply(this, arguments);
+    if (!hookState.enabled)
+      return hookState.originalValue.apply(this, arguments);
 
     if (sharedData.emptyCacheBetweenOperations) {
       clearCaches();
@@ -654,25 +724,25 @@ function createPrepareStackTrace(hookState) {
     // https://github.com/nodejs/node/pull/39182
     var errorString;
     if (kIsNodeError) {
-      if(kIsNodeError in error) {
+      if (kIsNodeError in error) {
         errorString = `${error.name} [${error.code}]: ${error.message}`;
       } else {
         errorString = ErrorPrototypeToString(error);
       }
     } else {
-      var name = error.name || 'Error';
-      var message = error.message || '';
+      var name = error.name || "Error";
+      var message = error.message || "";
       errorString = message ? name + ": " + message : name;
     }
 
     var state = { nextPosition: null, curPosition: null };
     var processedStack = [];
     for (var i = stack.length - 1; i >= 0; i--) {
-      processedStack.push('\n    at ' + wrapCallSite(stack[i], state));
+      processedStack.push("\n    at " + wrapCallSite(stack[i], state));
       state.nextPosition = state.curPosition;
     }
     state.curPosition = state.nextPosition = null;
-    return errorString + processedStack.reverse().join('');
+    return errorString + processedStack.reverse().join("");
   }
 }
 
@@ -692,9 +762,9 @@ function getErrorSource(error) {
     // Support files on disk
     if (!contents && fs && fs.existsSync(sourceAsPath)) {
       try {
-        contents = fs.readFileSync(sourceAsPath, 'utf8');
+        contents = fs.readFileSync(sourceAsPath, "utf8");
       } catch (er) {
-        contents = '';
+        contents = "";
       }
     }
 
@@ -702,15 +772,23 @@ function getErrorSource(error) {
     if (contents) {
       var code = contents.split(/(?:\r\n|\r|\n)/)[line - 1];
       if (code) {
-        return source + ':' + line + '\n' + code + '\n' +
-          new Array(column).join(' ') + '^';
+        return (
+          source +
+          ":" +
+          line +
+          "\n" +
+          code +
+          "\n" +
+          new Array(column).join(" ") +
+          "^"
+        );
       }
     }
   }
   return null;
 }
 
-function printFatalErrorUponExit (error) {
+function printFatalErrorUponExit(error) {
   var source = getErrorSource(error);
 
   // Ensure error is printed synchronously and not truncated
@@ -726,30 +804,30 @@ function printFatalErrorUponExit (error) {
   console.error(
     util.inspect(error, {
       customInspect: false,
-      colors: process.stderr.isTTY
+      colors: process.stderr.isTTY,
     })
   );
 }
 
-function shimEmitUncaughtException () {
+function shimEmitUncaughtException() {
   const originalValue = process.emit;
-  var hook = sharedData.processEmitHook = {
+  var hook = (sharedData.processEmitHook = {
     enabled: true,
     originalValue,
-    installedValue: undefined
-  };
+    installedValue: undefined,
+  });
   var isTerminatingDueToFatalException = false;
   var fatalException;
 
   process.emit = sharedData.processEmitHook.installedValue = function (type) {
     const hadListeners = originalValue.apply(this, arguments);
-    if(hook.enabled) {
-      if (type === 'uncaughtException' && !hadListeners) {
+    if (hook.enabled) {
+      if (type === "uncaughtException" && !hadListeners) {
         isTerminatingDueToFatalException = true;
         fatalException = arguments[1];
         process.exit(1);
       }
-      if (type === 'exit' && isTerminatingDueToFatalException) {
+      if (type === "exit" && isTerminatingDueToFatalException) {
         printFatalErrorUponExit(fatalException);
       }
     }
@@ -765,54 +843,68 @@ exports.getErrorSource = getErrorSource;
 exports.mapSourcePosition = mapSourcePosition;
 exports.retrieveSourceMap = retrieveSourceMap;
 
-exports.install = function(options) {
+exports.install = function (options) {
   options = options || {};
 
   if (options.environment) {
     environment = options.environment;
     if (["node", "browser", "auto"].indexOf(environment) === -1) {
-      throw new Error("environment " + environment + " was unknown. Available options are {auto, browser, node}")
+      throw new Error(
+        "environment " +
+          environment +
+          " was unknown. Available options are {auto, browser, node}"
+      );
     }
   }
 
   // Use dynamicRequire to avoid including in browser bundles
-  var Module = dynamicRequire(module, 'module');
+  var Module = dynamicRequire(module, "module");
 
   // Redirect subsequent imports of "source-map-support"
   // to this package
-  const {redirectConflictingLibrary = true, onConflictingLibraryRedirect} = options;
-  if(redirectConflictingLibrary) {
+  const { redirectConflictingLibrary = true, onConflictingLibraryRedirect } =
+    options;
+  if (redirectConflictingLibrary) {
     if (!sharedData.moduleResolveFilenameHook) {
       const originalValue = Module._resolveFilename;
-      const moduleResolveFilenameHook = sharedData.moduleResolveFilenameHook = {
-        enabled: true,
-        originalValue,
-        installedValue: undefined,
-      }
-      Module._resolveFilename = sharedData.moduleResolveFilenameHook.installedValue = function (request, parent, isMain, options) {
-        if (moduleResolveFilenameHook.enabled) {
-          // Match all source-map-support entrypoints: source-map-support, source-map-support/register
-          let requestRedirect;
-          if (request === 'source-map-support') {
-            requestRedirect = './';
-          } else if (request === 'source-map-support/register') {
-            requestRedirect = './register';
-          }
-
-          if (requestRedirect !== undefined) {
+      const moduleResolveFilenameHook = (sharedData.moduleResolveFilenameHook =
+        {
+          enabled: true,
+          originalValue,
+          installedValue: undefined,
+        });
+      Module._resolveFilename =
+        sharedData.moduleResolveFilenameHook.installedValue = function (
+          request,
+          parent,
+          isMain,
+          options
+        ) {
+          if (moduleResolveFilenameHook.enabled) {
+            // Match all source-map-support entrypoints: source-map-support, source-map-support/register
+            let requestRedirect;
+            if (request === "source-map-support") {
+              requestRedirect = "./";
+            } else if (request === "source-map-support/register") {
+              requestRedirect = "./register";
+            }
+
+            if (requestRedirect !== undefined) {
               const newRequest = require.resolve(requestRedirect);
               for (const cb of sharedData.onConflictingLibraryRedirectArr) {
                 cb(request, parent, isMain, options, newRequest);
               }
               request = newRequest;
+            }
           }
-        }
-        
-        return originalValue.call(this, request, parent, isMain, options);
-      }
-    } 
+
+          return originalValue.call(this, request, parent, isMain, options);
+        };
+    }
     if (onConflictingLibraryRedirect) {
-      sharedData.onConflictingLibraryRedirectArr.push(onConflictingLibraryRedirect);
+      sharedData.onConflictingLibraryRedirectArr.push(
+        onConflictingLibraryRedirect
+      );
     }
   }
 
@@ -841,7 +933,7 @@ exports.install = function(options) {
     var $compile = Module.prototype._compile;
 
     if (!$compile.__sourceMapSupport) {
-      Module.prototype._compile = function(content, filename) {
+      Module.prototype._compile = function (content, filename) {
         setFileContentsCache(filename, content);
         setSourceMapCache(filename, undefined);
         return $compile.call(this, content, filename);
@@ -853,36 +945,41 @@ exports.install = function(options) {
 
   // Configure options
   if (!sharedData.emptyCacheBetweenOperations) {
-    sharedData.emptyCacheBetweenOperations = 'emptyCacheBetweenOperations' in options ?
-      options.emptyCacheBetweenOperations : false;
+    sharedData.emptyCacheBetweenOperations =
+      "emptyCacheBetweenOperations" in options
+        ? options.emptyCacheBetweenOperations
+        : false;
   }
 
-
   // Install the error reformatter
   if (!sharedData.errorPrepareStackTraceHook) {
     const originalValue = Error.prepareStackTrace;
     sharedData.errorPrepareStackTraceHook = {
       enabled: true,
       originalValue,
-      installedValue: undefined
+      installedValue: undefined,
     };
-    Error.prepareStackTrace = sharedData.errorPrepareStackTraceHook.installedValue = createPrepareStackTrace(sharedData.errorPrepareStackTraceHook);
+    Error.prepareStackTrace =
+      sharedData.errorPrepareStackTraceHook.installedValue =
+        createPrepareStackTrace(sharedData.errorPrepareStackTraceHook);
   }
 
   if (!sharedData.processEmitHook) {
-    var installHandler = 'handleUncaughtExceptions' in options ?
-      options.handleUncaughtExceptions : true;
+    var installHandler =
+      "handleUncaughtExceptions" in options
+        ? options.handleUncaughtExceptions
+        : true;
 
     // Do not override 'uncaughtException' with our own handler in Node.js
     // Worker threads. Workers pass the error to the main thread as an event,
     // rather than printing something to stderr and exiting.
     try {
       // We need to use `dynamicRequire` because `require` on it's own will be optimized by WebPack/Browserify.
-      var worker_threads = dynamicRequire(module, 'worker_threads');
+      var worker_threads = dynamicRequire(module, "worker_threads");
       if (worker_threads.isMainThread === false) {
         installHandler = false;
       }
-    } catch(e) {}
+    } catch (e) {}
 
     // Provide the option to not install the uncaught exception handler. This is
     // to support other uncaught exception handlers (in test frameworks, for
@@ -897,25 +994,30 @@ exports.install = function(options) {
   }
 };
 
-exports.uninstall = function() {
-  if(sharedData.processEmitHook) {
+exports.uninstall = function () {
+  if (sharedData.processEmitHook) {
     // Disable behavior
     sharedData.processEmitHook.enabled = false;
     // If possible, remove our hook function.  May not be possible if subsequent third-party hooks have wrapped around us.
-    if(process.emit === sharedData.processEmitHook.installedValue) {
+    if (process.emit === sharedData.processEmitHook.installedValue) {
       process.emit = sharedData.processEmitHook.originalValue;
     }
     sharedData.processEmitHook = undefined;
   }
-  if(sharedData.errorPrepareStackTraceHook) {
+  if (sharedData.errorPrepareStackTraceHook) {
     // Disable behavior
     sharedData.errorPrepareStackTraceHook.enabled = false;
     // If possible or necessary, remove our hook function.
     // In vanilla environments, prepareStackTrace is `undefined`.
     // We cannot delegate to `undefined` the way we can to a function w/`.apply()`; our only option is to remove the function.
     // If we are the *first* hook installed, and another was installed on top of us, we have no choice but to remove both.
-    if(Error.prepareStackTrace === sharedData.errorPrepareStackTraceHook.installedValue || typeof sharedData.errorPrepareStackTraceHook.originalValue !== 'function') {
-      Error.prepareStackTrace = sharedData.errorPrepareStackTraceHook.originalValue;
+    if (
+      Error.prepareStackTrace ===
+        sharedData.errorPrepareStackTraceHook.installedValue ||
+      typeof sharedData.errorPrepareStackTraceHook.originalValue !== "function"
+    ) {
+      Error.prepareStackTrace =
+        sharedData.errorPrepareStackTraceHook.originalValue;
     }
     sharedData.errorPrepareStackTraceHook = undefined;
   }
@@ -923,16 +1025,20 @@ exports.uninstall = function() {
     // Disable behavior
     sharedData.moduleResolveFilenameHook.enabled = false;
     // If possible, remove our hook function.  May not be possible if subsequent third-party hooks have wrapped around us.
-    var Module = dynamicRequire(module, 'module');
-    if(Module._resolveFilename === sharedData.moduleResolveFilenameHook.installedValue) {
-      Module._resolveFilename = sharedData.moduleResolveFilenameHook.originalValue;
+    var Module = dynamicRequire(module, "module");
+    if (
+      Module._resolveFilename ===
+      sharedData.moduleResolveFilenameHook.installedValue
+    ) {
+      Module._resolveFilename =
+        sharedData.moduleResolveFilenameHook.originalValue;
     }
     sharedData.moduleResolveFilenameHook = undefined;
   }
   sharedData.onConflictingLibraryRedirectArr.length = 0;
-}
+};
 
-exports.resetRetrieveHandlers = function() {
+exports.resetRetrieveHandlers = function () {
   sharedData.retrieveFileHandlers.length = 0;
   sharedData.retrieveMapHandlers.length = 0;
-}
+};
